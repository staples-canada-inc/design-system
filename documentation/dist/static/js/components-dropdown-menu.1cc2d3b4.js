(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{"./components/dropdown-menu.md":function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return r});var t=o("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),l=(o("./node_modules/react/index.js"),o("./node_modules/@mdx-js/react/dist/index.es.js")),a={},d="wrapper";function r(e){var n=e.components,o=Object(t.a)(e,["components"]);return Object(l.b)(d,Object.assign({},a,o,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"dropdown-menu"},"Dropdown Menu"),Object(l.b)("p",null,"Via data attributes or JavaScript, the dropdown plugin toggles hidden content (dropdown menus) by toggling the ",Object(l.b)("inlineCode",{parentName:"p"},".show")," class on the parent list item. The ",Object(l.b)("inlineCode",{parentName:"p"},'data-toggle="dropdown"')," attribute is relied on for closing dropdown menus at an application level, so it's a good idea to always use it."),Object(l.b)("p",null,"On touch-enabled devices, opening a dropdown adds empty ",Object(l.b)("inlineCode",{parentName:"p"},"mouseover")," handlers to the immediate children of the ",Object(l.b)("inlineCode",{parentName:"p"},"<body>")," element. This admittedly ugly hack is necessary to work around a ",Object(l.b)("a",Object.assign({parentName:"p"},{href:"https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"quirk in iOS' event delegation"),", which would otherwise prevent a tap anywhere outside of the dropdown from triggering the code that closes the dropdown. Once the dropdown is closed, these additional empty ",Object(l.b)("inlineCode",{parentName:"p"},"mouseover")," handlers are removed."),Object(l.b)("h3",{id:"general-guidance"},"General Guidance"),Object(l.b)("p",null,"Dropdowns present a list of options that can be used to filter existing content. They can also be used for nested menu items or in responsive views for components like tabs. For multi-level dropdowns, it is recommended to limit options to 1-2 additional levels as it can get confusing for the user."),Object(l.b)("h3",{id:"dropdown-menu-1"},"Dropdown Menu"),Object(l.b)("p",null,"In this dropdown menu, we have multi-leveled dropdowns which allows users to have the option to select certain things based on a subject/category."),Object(l.b)("h3",{id:"multi-level-dropdown-menu"},"Multi-Level Dropdown Menu"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{}),'<div class="container">\n    <div class="row">\n        <h2>Multi level dropdown menu in Bootstrap</h2>\n        <hr>\n        <div class="dropdown">\n            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n            Dropdown\n            </button>\n            <ul class="dropdown-menu multi-level" role="menu" aria-labelledby="dropdownMenu">\n                <li class="dropdown-item"><a href="#">Some action</a></li>\n                <li class="dropdown-item"><a href="#">Some other action</a></li>\n                <li class="dropdown-submenu">\n                <a  class="dropdown-item" tabindex="-1" href="#">Hover me for more options</a>\n                <ul class="dropdown-menu">\n                    <li class="dropdown-item"><a tabindex="-1" href="#">Second level</a></li>\n                    <li class="dropdown-submenu">\n                    <a class="dropdown-item" href="#">Second Level</a>\n                    <ul class="dropdown-menu">\n                        <li class="dropdown-item"><a href="#">Third level</a></li>\n                            <li class="dropdown-item"><a href="#">Third level</a></li>\n                    </ul>\n                    </li>\n                    <li class="dropdown-item"><a href="#">Second level</a></li>\n                    <li class="dropdown-item"><a href="#">Second level</a></li>\n                </ul>\n                </li>\n            </ul>\n        </div>\n    </div>\n</div>\n')),Object(l.b)("h3",{id:"navbar-with-multi-level-dropdown-menu"},"Navbar with Multi-Level Dropdown Menu"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{}),'<ul class="nav nav-tabs">\n<li class="nav-item">\n    <a class="nav-link active" href="#">Active</a>\n</li>\n<li class="nav-item dropdown">\n    <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">Dropdown</a>\n    <div class="dropdown-menu">\n    <a class="dropdown-item" href="#">Action</a>\n    <a class="dropdown-item" href="#">Another action</a>\n    <a class="dropdown-item" href="#">Something else here</a>\n    <div class="dropdown-divider"></div>\n    <a class="dropdown-item" href="#">Separated link</a>\n    </div>\n</li>\n<li class="nav-item">\n    <a class="nav-link" href="#">Link</a>\n</li>\n<li class="nav-item">\n    <a class="nav-link disabled" href="#" tabindex="-1" aria-disabled="true">Disabled</a>\n</li>\n</ul>\n')),Object(l.b)("p",null,"We also can do dropdowns in forms."),Object(l.b)("h3",{id:"menu-forms"},"Menu Forms"),Object(l.b)("p",null,"Put a form within a dropdown menu, or make it into a dropdown menu, and use ",Object(l.b)("inlineCode",{parentName:"p"},"margin or padding utilities")," to give it the negative space you require."),Object(l.b)("h3",{id:"simple-dropdown-menu-form"},"Simple Dropdown Menu Form"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{}),'<div class="dropdown-menu">\n<form class="px-4 py-3">\n    <div class="form-group">\n    <label for="exampleDropdownFormEmail1">Email address</label>\n    <input type="email" class="form-control" id="exampleDropdownFormEmail1" placeholder="email@example.com">\n    </div>\n    <div class="form-group">\n    <label for="exampleDropdownFormPassword1">Password</label>\n    <input type="password" class="form-control" id="exampleDropdownFormPassword1" placeholder="Password">\n    </div>\n    <div class="form-check">\n    <input type="checkbox" class="form-check-input" id="dropdownCheck">\n    <label class="form-check-label" for="dropdownCheck">\n        Remember me\n    </label>\n    </div>\n    <button type="submit" class="btn btn-primary">Sign in</button>\n</form>\n<div class="dropdown-divider"></div>\n<a class="dropdown-item" href="#">New around here? Sign up</a>\n<a class="dropdown-item" href="#">Forgot password?</a>\n</div>\n')),Object(l.b)("p",null,"You can also change the directions of the dropdowns to become droplefts. droprights or dropups."),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("th",null,"Class"),Object(l.b)("th",null,"Direction")),Object(l.b)("tbody",null,Object(l.b)("tr",null,Object(l.b)("td",null,Object(l.b)("code",null,".dropdown")),Object(l.b)("td",null,"Down")),Object(l.b)("tr",null,Object(l.b)("td",null,Object(l.b)("code",null,".dropright")),Object(l.b)("td",null,"Right")),Object(l.b)("tr",null,Object(l.b)("td",null,Object(l.b)("code",null,".dropleft")),Object(l.b)("td",null,"Left")),Object(l.b)("tr",null,Object(l.b)("td",null,Object(l.b)("code",null,".dropup")),Object(l.b)("td",null,"Up")))))}r&&r===Object(r)&&Object.isExtensible(r)&&Object.defineProperty(r,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"components/dropdown-menu.md"}}),r.isMDXComponent=!0}}]);
//# sourceMappingURL=components-dropdown-menu.54fc6a167dfe2e3d16e3.js.map